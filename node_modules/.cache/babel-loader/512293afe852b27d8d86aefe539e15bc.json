{"ast":null,"code":"var _jsxFileName = \"/Users/tonya/Documents/GitHub/goit-react-hw-04-feedback/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Notification from \"./components/Notification\";\nimport Section from \"./components/Section\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  good: 0,\n  neutral: 0,\n  bad: 0\n};\nconst buttonsOption = [\"good\", \"neutral\", \"bad\"];\n\nconst App = () => {\n  _s();\n\n  const [state, setState] = useState(initialState);\n\n  const onClickButton = feedbackType => {\n    setState({ ...state,\n      [feedbackType]: state[feedbackType] + 1\n    });\n  };\n\n  const countTotalFeedback = () => {\n    return state.good + state.neutral + state.bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round(state.good / countTotalFeedback() * 100);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n        options: buttonsOption,\n        onLeaveFeedback: onClickButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Statistic\",\n      children: countTotalFeedback() ? /*#__PURE__*/_jsxDEV(Statistics, {\n        good: state.good,\n        neutral: state.neutral,\n        bad: state.bad,\n        total: countTotalFeedback(),\n        positivePercentage: countPositiveFeedbackPercentage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Notification, {\n        message: \"There is no feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"2/eSVXfk2V5ZKttKXeUPXMa6Sd8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tonya/Documents/GitHub/goit-react-hw-04-feedback/src/App.js"],"names":["useState","Statistics","FeedbackOptions","Notification","Section","initialState","good","neutral","bad","buttonsOption","App","state","setState","onClickButton","feedbackType","countTotalFeedback","countPositiveFeedbackPercentage","Math","round"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,CADa;AAEnBC,EAAAA,OAAO,EAAE,CAFU;AAGnBC,EAAAA,GAAG,EAAE;AAHc,CAArB;AAKA,MAAMC,aAAa,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,KAApB,CAAtB;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACK,YAAD,CAAlC;;AAEA,QAAMQ,aAAa,GAAIC,YAAD,IAAkB;AACtCF,IAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAY,OAACG,YAAD,GAAgBH,KAAK,CAACG,YAAD,CAAL,GAAsB;AAAlD,KAAD,CAAR;AACD,GAFD;;AAGA,QAAMC,kBAAkB,GAAG,MAAM;AAC/B,WAAOJ,KAAK,CAACL,IAAN,GAAaK,KAAK,CAACJ,OAAnB,GAA6BI,KAAK,CAACH,GAA1C;AACD,GAFD;;AAIA,QAAMQ,+BAA+B,GAAG,MAAM;AAC5C,WAAOC,IAAI,CAACC,KAAL,CAAYP,KAAK,CAACL,IAAN,GAAaS,kBAAkB,EAAhC,GAAsC,GAAjD,CAAP;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,6BACE,QAAC,eAAD;AACE,QAAA,OAAO,EAAEN,aADX;AAEE,QAAA,eAAe,EAAEI;AAFnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,WAAf;AAAA,gBACGE,kBAAkB,kBACjB,QAAC,UAAD;AACE,QAAA,IAAI,EAAEJ,KAAK,CAACL,IADd;AAEE,QAAA,OAAO,EAAEK,KAAK,CAACJ,OAFjB;AAGE,QAAA,GAAG,EAAEI,KAAK,CAACH,GAHb;AAIE,QAAA,KAAK,EAAEO,kBAAkB,EAJ3B;AAKE,QAAA,kBAAkB,EAAEC,+BAA+B;AALrD;AAAA;AAAA;AAAA;AAAA,cADiB,gBASjB,QAAC,YAAD;AAAc,QAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAuBD,CArCD;;GAAMN,G;;KAAAA,G;AAuCN,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Notification from \"./components/Notification\";\nimport Section from \"./components/Section\";\n\nconst initialState = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n};\nconst buttonsOption = [\"good\", \"neutral\", \"bad\"];\nconst App = () => {\n  const [state, setState] = useState(initialState);\n\n  const onClickButton = (feedbackType) => {\n    setState({ ...state, [feedbackType]: state[feedbackType] + 1 });\n  };\n  const countTotalFeedback = () => {\n    return state.good + state.neutral + state.bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((state.good / countTotalFeedback()) * 100);\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={buttonsOption}\n          onLeaveFeedback={onClickButton}\n        ></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistic\">\n        {countTotalFeedback() ? (\n          <Statistics\n            good={state.good}\n            neutral={state.neutral}\n            bad={state.bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          ></Statistics>\n        ) : (\n          <Notification message=\"There is no feedback\"></Notification>\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}